stages:
    - build
    - test
    - deploy

test:
  image: alpine:latest
  services:
    - ${CI_REGISTRY_IMAGE}:$CI_COMMIT_REF_NAME
  stage: test
  before_script:
    - apk add curl
  script:
    - "[ $(curl $(echo ${CI_REGISTRY_IMAGE}|sed s./.-.g):3000/api -w \"%{http_code}\" --retry 5 --retry-connrefused) = \"308\" ]"
    - "[ $(curl $(echo ${CI_REGISTRY_IMAGE}|sed s./.-.g):3000/api/web_filtering) = \"{\\\"type\\\":\\\"none\\\"}\" ]"
  rules:
    - exists:
      - Dockerfile

heroku:
  image: alpine:latest
  stage: deploy
  before_script:
    - apk add jq curl
  script:
    - export CONTAINER_ID=$(curl -u ":$HEROKU_API_KEY" "https://registry.heroku.com/v2/$HEROKU_APPNAME/web/manifests/$CI_COMMIT_TAG" -H "Accept":" application/vnd.docker.distribution.manifest.v2+json"|jq -r ".config.digest")
    - echo Deploying $CONTAINER_ID
    - "curl -X PATCH https://api.heroku.com/apps/$HEROKU_APPNAME/formation -d
    '{\"updates\": [{\"type\": \"web\",\"docker_image\":\"'$CONTAINER_ID'\"}]}'
    -H \"Content-Type: application/json\"
    -H \"Accept: application/vnd.heroku+json; version=3.docker-releases\"
    -H \"Authorization: Bearer $HEROKU_API_KEY\""
    - "[ $(curl loilo.herokuapp.com/api -w \"%{http_code}\") -lt \"500\" ]"
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+.*$/
      when: manual

docker:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u "_" -p $HEROKU_API_KEY registry.heroku.com
  script:
    - export CONTAINER_ID=$(docker build . -q)
    - >
        if [[ $CI_COMMIT_TAG =~ '^v[[:digit:]]+\.[[:digit:]]+.*$' ]]
        do
          docker tag ${CONTAINER_ID} ${CI_REGISTRY_IMAGE}:latest
          docker push ${CI_REGISTRY_IMAGE}:latest
        done
    - docker tag ${CONTAINER_ID} ${CI_REGISTRY_IMAGE}:$CI_COMMIT_REF_NAME
    - docker push ${CI_REGISTRY_IMAGE}:$CI_COMMIT_REF_NAME
    - docker tag ${CONTAINER_ID} registry.heroku.com/$HEROKU_APPNAME/web:$CI_COMMIT_REF_NAME
    - docker push registry.heroku.com/$HEROKU_APPNAME/web:$CI_COMMIT_REF_NAME
  rules:
    - exists:
      - Dockerfile

npm:
  image: node:slim
  stage: build
  before_script:
    - npm config set registry https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}
    - npm version $CI_COMMIT_TAG
  script:
    - npm publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+.*$/
      when: always

include:
  - template: Container-Scanning.gitlab-ci.yml

container_scanning:
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
    CI_APPLICATION_TAG: $CI_COMMIT_REF_NAME
  rules:
    - exists:
      - Dockerfile
